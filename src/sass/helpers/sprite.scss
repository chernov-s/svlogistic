// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$icon-man-name: 'icon-man';
$icon-man-x: 0px;
$icon-man-y: 61px;
$icon-man-offset-x: 0px;
$icon-man-offset-y: -61px;
$icon-man-width: 50px;
$icon-man-height: 60px;
$icon-man-total-width: 51px;
$icon-man-total-height: 307px;
$icon-man-image: '../img/sprite.png';
$icon-man: (0px, 61px, 0px, -61px, 50px, 60px, 51px, 307px, '../img/sprite.png', 'icon-man', );
$icon-mask-name: 'icon-mask';
$icon-mask-x: 0px;
$icon-mask-y: 123px;
$icon-mask-offset-x: 0px;
$icon-mask-offset-y: -123px;
$icon-mask-width: 45px;
$icon-mask-height: 60px;
$icon-mask-total-width: 51px;
$icon-mask-total-height: 307px;
$icon-mask-image: '../img/sprite.png';
$icon-mask: (0px, 123px, 0px, -123px, 45px, 60px, 51px, 307px, '../img/sprite.png', 'icon-mask', );
$icon-ship-name: 'icon-ship';
$icon-ship-x: 0px;
$icon-ship-y: 185px;
$icon-ship-offset-x: 0px;
$icon-ship-offset-y: -185px;
$icon-ship-width: 51px;
$icon-ship-height: 60px;
$icon-ship-total-width: 51px;
$icon-ship-total-height: 307px;
$icon-ship-image: '../img/sprite.png';
$icon-ship: (0px, 185px, 0px, -185px, 51px, 60px, 51px, 307px, '../img/sprite.png', 'icon-ship', );
$icon-train-name: 'icon-train';
$icon-train-x: 0px;
$icon-train-y: 247px;
$icon-train-offset-x: 0px;
$icon-train-offset-y: -247px;
$icon-train-width: 33px;
$icon-train-height: 60px;
$icon-train-total-width: 51px;
$icon-train-total-height: 307px;
$icon-train-image: '../img/sprite.png';
$icon-train: (0px, 247px, 0px, -247px, 33px, 60px, 51px, 307px, '../img/sprite.png', 'icon-train', );
$phone-name: 'phone';
$phone-x: 0px;
$phone-y: 28px;
$phone-offset-x: 0px;
$phone-offset-y: -28px;
$phone-width: 31px;
$phone-height: 31px;
$phone-total-width: 51px;
$phone-total-height: 307px;
$phone-image: '../img/sprite.png';
$phone: (0px, 28px, 0px, -28px, 31px, 31px, 51px, 307px, '../img/sprite.png', 'phone', );
$question-name: 'question';
$question-x: 0px;
$question-y: 0px;
$question-offset-x: 0px;
$question-offset-y: 0px;
$question-width: 26px;
$question-height: 26px;
$question-total-width: 51px;
$question-total-height: 307px;
$question-image: '../img/sprite.png';
$question: (0px, 0px, 0px, 0px, 26px, 26px, 51px, 307px, '../img/sprite.png', 'question', );
$spritesheet-width: 51px;
$spritesheet-height: 307px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($icon-man, $icon-mask, $icon-ship, $icon-train, $phone, $question, );
$spritesheet: (51px, 307px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
